#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{hyperref}
\usepackage{tikz}
\usetikzlibrary{shapes.geometric, arrows}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing double
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.5in
\topmargin 1.6in
\rightmargin 1.2in
\bottommargin 1.6in
\headheight 1.5in
\headsep 0.3in
\footskip 0.8in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle plain
\bullet 1 2 6 -1
\bullet 2 2 12 -1
\bullet 3 1 25 -1
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Developed Application
\begin_inset CommandInset label
LatexCommand label
name "chap:Developed Application"

\end_inset


\end_layout

\begin_layout Standard
Within this Chapter the developed application in terms of software development
 will be analyze.
 This application will be the base for the calculation, visualization and
 arrangement of the usage statistics from the different areas of interest,
 pedestrian detections and other results.
 As said in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Objectives"

\end_inset

 this usage data can be pre-generated or generated ideally under a real-time
 constraint.
 The main application environment should be user-friendly to ensure a correct
 and easy usage by the end user.
 It has been developed completely from scratch for the purpose of this Master
 Thesis.
\end_layout

\begin_layout Standard
The application has been developed under 
\color blue

\begin_inset CommandInset href
LatexCommand href
name "QT Creator"
target "QT Creator"

\end_inset


\color inherit
 coding environment in Mac OS Sierra.
 This decision has fundamentally been based on the following QT characteristics:
\end_layout

\begin_layout Enumerate
Its cross-platform characteristic which makes it easily portable from one
 operating system to another such as Windows or Linux distributions.
\end_layout

\begin_layout Enumerate
Its application window designer that enables the programmer to design software
 windows by using an interface instead of having to code to create the mentioned
 window and set up all the desired configuration (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:QT-Window-Designer"

\end_inset

).
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/Developed Application/QT Window Designer.png
	lyxscale 20
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
QT Main Window Designer
\begin_inset CommandInset label
LatexCommand label
name "fig:QT-Window-Designer"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
The possibility to add OpenCV libraries to the project as well as independent
 external libraries.
\end_layout

\begin_layout Enumerate
Its multi-thread capabilities that enables to perform different code segments
 in various threads to increase computational speed.
\end_layout

\begin_layout Standard
Due to the complexity of some of the algorithms used in terms of parameter
 tuning and configuration two separate applications have been developed,
 engineer and user version.
 
\end_layout

\begin_layout Standard
The first version of the software corresponds to the engineer application.
 As its name says, it is design so it can be used by programmers or engineers
 who generally understand concepts of the algorithms running at the backend
 application.
 This means that all the variable parameters are available for tuning from
 the graphical interface, as well as different detector options and visualizatio
n.
 
\end_layout

\begin_layout Standard
The final motivation for this version is to achieve high variability and
 tuning in terms of algorithm parameters, however, in order to have good
 performance the user should have basic knowledge about how parameters are
 affecting the software performance.
\end_layout

\begin_layout Standard
For the engineer application both single-thread and multi-thread versions
 have been developed and are analyzed on the following lines.
 All the code for both approaches is available in the following 
\color blue

\begin_inset CommandInset href
LatexCommand href
name "GitHub Repository"
target "https://github.com/alexlopezcifuentes/IPCV-MasterThesis/"

\end_inset

.
\end_layout

\begin_layout Standard
During the analysis of the application trough out the Section some flow-charts
 are displayed.
 The used legend in those can be observed in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Flow-chart-legend"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikzstyle{startstop} = [rectangle, rounded corners, minimum width=3cm, minimum
 height=1cm,text centered, draw=black, fill=red!30]
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{process} = [rectangle, minimum width=3cm, minimum height=1cm,
 text centered, draw=black, fill=orange!30]
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{io} = [trapezium, trapezium left angle=70, trapezium right angle=110,
 minimum width=1cm, minimum height=1cm, text centered, draw=black, fill=blue!30,
 inner sep=10pt]
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{decision} = [diamond, minimum width=1cm, minimum height=1cm,text
 width=1.5cm, text centered, draw=black, fill=green!30]
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{arrow} = [draw, -latex']
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[node distance=2cm] 
\end_layout

\begin_layout Plain Layout

%% NODES
\end_layout

\begin_layout Plain Layout


\backslash
node (UIStart) [startstop] {
\backslash
footnotesize Start/Stop Module};
\end_layout

\begin_layout Plain Layout


\backslash
node (VideoInput) [io, right of = UIStart, xshift=2.3cm] {
\backslash
footnotesize Input/Output Module};
\end_layout

\begin_layout Plain Layout


\backslash
node (Camera2) [process, below of = UIStart] {
\backslash
footnotesize Process Module};
\end_layout

\begin_layout Plain Layout


\backslash
node (VideoEnd) [decision, right of = Camera2, xshift=2.3cm] {
\backslash
footnotesize Decision Module};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Flow-chart legend
\begin_inset CommandInset label
LatexCommand label
name "fig:Flow-chart-legend"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Single-thread Engineer Application
\end_layout

\begin_layout Standard
During the first stages of the development and for simplicity sake the applicati
on has been design and developed to run under a single thread.
 This means that all the processing has been done sequentially camera by
 camera.
 A simple flow-chart diagram that illustrates the execution path can be
 seen in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Flow-chart diagram for the single-thread application"

\end_inset

 .
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikzstyle{startstop} = [rectangle, rounded corners, minimum width=3cm, minimum
 height=1cm,text centered, draw=black, fill=red!30]
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{process} = [rectangle, minimum width=3cm, minimum height=1cm,
 text centered, draw=black, fill=orange!30]
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{io} = [trapezium, trapezium left angle=70, trapezium right angle=110,
 minimum width=1cm, minimum height=1cm, text centered, draw=black, fill=blue!30,
 inner sep=10pt]
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{decision} = [diamond, minimum width=1cm, minimum height=1cm,text
 width=1.5cm, text centered, draw=black, fill=green!30]
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{arrow} = [draw, -latex']
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[node distance=2cm] 
\end_layout

\begin_layout Plain Layout

%% NODES
\end_layout

\begin_layout Plain Layout


\backslash
node (UIStart) [startstop] {
\backslash
footnotesize Interface Start};
\end_layout

\begin_layout Plain Layout


\backslash
node (UIIdle) [startstop, below of = UIStart] {
\backslash
footnotesize Interface Idle};
\end_layout

\begin_layout Plain Layout


\backslash
node (VideoInput) [io, right of = UIIdle, xshift=2cm] {
\backslash
footnotesize Video Sequence};
\end_layout

\begin_layout Plain Layout


\backslash
node (ParamInput) [io, left of = UIIdle, xshift=-2cm] {
\backslash
footnotesize UI Parameters};
\end_layout

\begin_layout Plain Layout


\backslash
node (GetFrame) [process, below of=UIIdle, yshift=-0.5cm] {
\backslash
footnotesize Get Frame};
\end_layout

\begin_layout Plain Layout


\backslash
node (Camera2) [process, below of=GetFrame, yshift=-0.5cm] {
\backslash
footnotesize Camera 2};
\end_layout

\begin_layout Plain Layout


\backslash
node (Camera1) [process, left of=Camera2, xshift=-2cm] {
\backslash
footnotesize Camera 1};
\end_layout

\begin_layout Plain Layout


\backslash
node (Camera3) [process, right of=Camera2, xshift=2cm] {
\backslash
footnotesize Camera 3};
\end_layout

\begin_layout Plain Layout


\backslash
node (Display) [process, below of=Camera3, yshift=-0.5cm] {
\backslash
footnotesize Display};
\end_layout

\begin_layout Plain Layout


\backslash
node (VideoEnd) [decision, below of=Camera2, yshift=-0.5cm] {
\backslash
footnotesize Video Finished};
\end_layout

\begin_layout Plain Layout


\backslash
node (VideoStop) [startstop, below of=VideoEnd, yshift=-1cm] {
\backslash
footnotesize Video Stops};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%% ARROWS
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (UIStart) -- (UIIdle);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (VideoInput) -- (UIIdle);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (ParamInput) -- (UIIdle);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (UIIdle) -- (GetFrame);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (GetFrame) |- ([yshift=0.6cm] Camera1.north) -- (Camera1.north);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (Camera1) -- (Camera2);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (Camera2) -- (Camera3);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (Camera3) -- (Display);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (Display) -- (VideoEnd);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (VideoEnd.west) -- node[anchor=south]{No} ++(-5,0) -- ++(0,5)
 -- (GetFrame.west);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (VideoEnd) -- node[anchor=east]{Yes}(VideoStop);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Flow-chart diagram for the single-thread application.
\begin_inset CommandInset label
LatexCommand label
name "fig:Flow-chart diagram for the single-thread application"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This approach has the advantage that all the code is executed in the same
 segment which makes really easy for instance, to share information between
 cameras as they share the same memory segments, however, this design will
 only be valid if the computational effort is minimum.
 Before displaying any results, all the process for the three cameras should
 be computed one after the other.
 This means that when calculating detections for one camera the others will
 remain idle.
 When working with such a multi-camera system with heavy algorithms running
 as the proposed in our work, the computational time increases exponentially
 and this design is no longer worthwhile.
\end_layout

\begin_layout Section
Multi-thread Engineer Application
\end_layout

\begin_layout Standard
The new and used approach can be observed in the flow-chart displayed in
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Flow-chart diagram for the multi-thread application"

\end_inset

.
 As one can observe, now different threads are running in parallel, one
 for each camera, and so, all the process is no longer done sequentially
 and computing power from the CPU can be much more usable.
\end_layout

\begin_layout Standard
Now, however, as threads are running separately one have to create some
 sort of synchronization between them to keep consistency in the application.
 One thread can process a frame faster than another one due to multiple
 external reasons, nevertheless, the application should display the same
 exact frame for all the cameras more over if the information is going to
 be shared between threads.
 In our case the synchronization is perform by the barrier that can be observed
 in diagram 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Flow-chart diagram for the multi-thread application"

\end_inset

.
 This barrier will create a meeting point for all the threads that all of
 them must reach before continuing with their execution.
 
\end_layout

\begin_layout Standard
In the code two barriers will be available.
 The first one will ensure that all the threads have perform pedestrian
 detection before sharing those detections between the rest of the threads.
 The second one will be at the end of a frame execution, so threads wait
 to each other before sending results to the main window for representing
 processes.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikzstyle{startstop} = [rectangle, rounded corners, minimum width=3cm, minimum
 height=1cm,text centered, draw=black, fill=red!30]
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{process} = [rectangle, minimum width=3cm, minimum height=1cm,
 text centered, draw=black, fill=orange!30]
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{io} = [trapezium, trapezium left angle=70, trapezium right angle=110,
 minimum width=1cm, minimum height=1cm, text centered, draw=black, fill=blue!30,
 inner sep=10pt]
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{decision} = [diamond, minimum width=1cm, minimum height=1cm,text
 width=1.5cm, text centered, draw=black, fill=green!30]
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{arrow} = [draw, -latex']
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[node distance=2cm] 
\end_layout

\begin_layout Plain Layout

%% NODES
\end_layout

\begin_layout Plain Layout


\backslash
node (UIStart) [startstop] {
\backslash
footnotesize Interface Start};
\end_layout

\begin_layout Plain Layout


\backslash
node (UIIdle) [startstop, below of = UIStart] {
\backslash
footnotesize Interface Idle};
\end_layout

\begin_layout Plain Layout


\backslash
node (VideoInput) [io, right of = UIIdle, xshift=2cm] {
\backslash
footnotesize Video Sequence};
\end_layout

\begin_layout Plain Layout


\backslash
node (ParamInput) [io, left of = UIIdle, xshift=-2cm] {
\backslash
footnotesize UI Parameters};
\end_layout

\begin_layout Plain Layout


\backslash
node (ThreadStart) [startstop, below of = UIIdle] {
\backslash
footnotesize Threads Start};
\end_layout

\begin_layout Plain Layout


\backslash
node (GetFrame) [startstop, below of = ThreadStart] {
\backslash
footnotesize Get New Video Frame};
\end_layout

\begin_layout Plain Layout


\backslash
node (Camera2) [process, below of=GetFrame, yshift = -0.5cm] {
\backslash
footnotesize Camera 2 Thread};
\end_layout

\begin_layout Plain Layout


\backslash
node (Camera1) [process, left of=Camera2, xshift=-2.7cm] {
\backslash
footnotesize Camera 1 Thread};
\end_layout

\begin_layout Plain Layout


\backslash
node (Camera3) [process, right of=Camera2, xshift=2.7cm] {
\backslash
footnotesize Camera 3 Thread};
\end_layout

\begin_layout Plain Layout


\backslash
node (ThreadBarrier) [startstop, below of=Camera2] {
\backslash
footnotesize Thread Barrier / Meeting Point};
\end_layout

\begin_layout Plain Layout


\backslash
node (Display) [process, below of=ThreadBarrier] {
\backslash
footnotesize Display};
\end_layout

\begin_layout Plain Layout


\backslash
node (VideoEnd) [decision, below of=Display, yshift=-0.5cm] {
\backslash
footnotesize Video Finished};
\end_layout

\begin_layout Plain Layout


\backslash
node (VideoStop) [startstop, below of=VideoEnd, yshift=-1cm] {
\backslash
footnotesize Video Processing Stops};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%% ARROWS
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (UIStart) -- (UIIdle);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (VideoInput) -- (UIIdle);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (ParamInput) -- (UIIdle);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (UIIdle) -- (ThreadStart);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (ThreadStart) -- (GetFrame);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (GetFrame.south) -- (Camera1.north);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (GetFrame.south) -- (Camera2.north);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (GetFrame.south) -- (Camera3.north);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (Camera1) |- (ThreadBarrier);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (Camera2) -- (ThreadBarrier);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (Camera3) |- (ThreadBarrier);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (ThreadBarrier) -- (Display);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (Display) -- (VideoEnd);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (VideoEnd) -| node[near start, anchor=south]{No}([xshift=-5cm]
 GetFrame.west) -- (GetFrame.west);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (VideoEnd) -- node[anchor=east]{Yes}(VideoStop);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Flow-chart diagram for the multi-thread application.
\begin_inset CommandInset label
LatexCommand label
name "fig:Flow-chart diagram for the multi-thread application"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Main application window is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Main-application-window"

\end_inset

.
 As one can observe it is compose of four separate areas:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/Application/Main Window.png
	lyxscale 20
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Main application window.
\begin_inset CommandInset label
LatexCommand label
name "fig:Main-application-window"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Application menu bar.
\end_layout

\begin_deeper
\begin_layout Standard
In this menu we will have the main application actions.
 From here the user can open a new video sequence, compute the set of needed
 homographies for the algorithms or close the program.
 The application also provides a help searcher and an external information
 window.
 This set of functions can be seen in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Application-menu-bar"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/Application/File Submenu.png
	lyxscale 60
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
File Submenu
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/Application/Help Submenu.png
	lyxscale 60
	width 55text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Help Submenu
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/Application/Open File Dialog.png
	lyxscale 20
	width 55text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
File open dialog.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/Application/About Window.png
	lyxscale 30
	width 35text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Application information window.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Application menu bar
\begin_inset CommandInset label
LatexCommand label
name "fig:Application-menu-bar"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Options menu.
\end_layout

\begin_deeper
\begin_layout Standard
The options box (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Options Menu"

\end_inset

) in the application will contain all the possible parameters that can be
 tuned during the execution of the program.
 From here algorithms can be changed in real time so there is no need to
 restart the running before changing some parameter.
 The user can select among various pedestrian detectors such as PSP-Net
 detector, DPM, ACF or even Fast-RCNN as well as the type of representation
 that one wants for these detections, lines or gaussians which will be explained
 in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Pedestrian-Filtering-and"

\end_inset

.
 It also enables the user to select the desire pedestrian detection threshold
 as well as the filtering or constraint that is used.
 One can select between regular pedestrian detection, PD with semantic constrain
ing or to perform multi camera projection.
 In addition mask filtering can be also perform so PD search area is reduced.
 Finally, a check box to display or not ground truth information is available
 too.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/Application/Options Menu.png
	lyxscale 30
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Options Menu.
\begin_inset CommandInset label
LatexCommand label
name "fig:Options Menu"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Information Display
\end_layout

\begin_deeper
\begin_layout Standard
Along this text box some guide information will be provided to the user.
 Messages such as 
\begin_inset Quotes eld
\end_inset

Open video files
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Processing starts now
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

DPM Pedestrian Detector is now in use
\begin_inset Quotes erd
\end_inset

 will appear during the execution of the application so the user can obtain
 some information about what to do, or what algorithm is in use.
 This can be observed in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Information-Display"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/Application/Information Display.png
	lyxscale 60
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Information Display
\begin_inset CommandInset label
LatexCommand label
name "fig:Information-Display"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Results Display
\end_layout

\begin_deeper
\begin_layout Standard
This is the main display area in the application in which all the visual
 results are presented.
 We have three separate windows for each of the used camera as well as one
 more display window for the cenital plane.
 Here the camera frames with its pedestrian detection or/and ground truth
 will be shown and all the projected semantic can be observed on the cenital
 frame.
 An example of its performance is presented in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Results Display Area"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/Application/Result Display.png
	lyxscale 40
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Results Display Area
\begin_inset CommandInset label
LatexCommand label
name "fig:Results Display Area"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection
Classes Distribution
\end_layout

\begin_layout Standard
In terms of C++ blocks the application has been divided into several classes
 for a better code design and easier understanding.
 Their functions will be explained in the following lines:
\end_layout

\begin_layout Itemize
MainWindow.
 This class corresponds to the main interface window and main application
 thread.
 It is the base for all the further processing as everything will be inherit
 from this class.
 The functions that are done by this class are creating file open dialogs,
 setting up and start all the camera threads, update all the algorithms
 configurations with values from the UI and displaying results through the
 CVImageWidget class.
 It is also responsible of the information sharing between threads.
\end_layout

\begin_layout Itemize
AboutWindow.
 Class that execute the second available information window.
 This instance will display general information about the application and
 its developers.
\end_layout

\begin_layout Itemize
CameraWorker.
 Main class for all the execution in each of the cameras.
 CameraWorker class is linked with a unique thread that will process all
 the algorithms inside.
 It has CameraStream, PeopleDetector, Evaluation and Barrier classes declared
 within it to distribute the processing.
\end_layout

\begin_layout Itemize
CameraStream.
 This class will perform all the functions that has to deal with the video
 processing except pedestrian detection.
 The main reading loop, homographies and semantic projections are computed
 in this class.
\end_layout

\begin_layout Itemize
PeopleDetector.
 Main class to perform everything with respect to pedestrian detection.
 All the algorithms to detect, project and draw pedestrian either on the
 camera frame or the cenital plane are from this class.
\end_layout

\begin_layout Itemize
Evaluation: Here ground truth is read and also the evaluation between system
 pedestrian detection and ground truth information is performed.
\end_layout

\begin_layout Itemize
Barrier.
 This class implements everything that has to deal with thread synchronization.
 It is declared in Main Window and passed by arguments to the thread so
 each of them has the same exact barrier to perform the synchronization.
\end_layout

\begin_layout Itemize
CVImageWidget.
 Display representation class that deals with all the process to finally
 paint OpenCV Mat images into a QT main window interface Widget.
\end_layout

\begin_layout Standard
In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Hierarchical representation of the code"

\end_inset

 a hierarchical representation of how the different classes are related
 in the code is presented.
 As on can observe everything is under the heritage of the main window.
 Here we have the three camera worker threads which have inside the same
 barrier, and each of them a camera stream, a people detector and a evaluator.
 In addition, main window will also be the parent of the extra about window
 and the CVImageWidget.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/Application/Hierarchical class distribution.png
	lyxscale 30
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Hierarchical representation of the code.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:Hierarchical representation of the code"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Multi-thread User Application
\end_layout

\begin_layout Standard
On the contrary to the analyzed version, the second developed application
 is focus on general users.
 This version only allows to load the video files and display results.
 All the parameters are set by default so the user does not have to fine
 tuning any of them making the usage and the general perception of the applicati
on much more simple and easy.
 This method ensures that achieved results are the best ones that the proposed
 system can obtain and it is the best approach to display demos.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:User version application main window"

\end_inset

 displays the general application window where we can observe the difference
 with the Engineer version.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Images/Application/User Version Interface.png
	lyxscale 15
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
User version application main window.
\begin_inset CommandInset label
LatexCommand label
name "fig:User version application main window"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As said, conversely to the engineer application the only functionality of
 the main window is to display results and guide information.
 All the options presented in the engineer application for tuning are no
 longer available.
\end_layout

\end_body
\end_document
